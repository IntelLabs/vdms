# Uses docker/check-in/Dockerfile without coverage or coverity
# Same as docker/base/Dockerfile but builds VDMS with local changes instead of external repo
name: SDL Requirements using Docker Image

# Controls when the action will run. Triggers the workflow on push or pull request (for testing)
# events but only for the master and develop branch
on:
  push:
    branches:
      - develop
# on:
#   pull_request:
#     types: [ opened, edited, synchronize, reopened ]
#     branches:
#       - develop
#       - master

# Ensures that only a single workflow in the same concurrency group will run at the same time
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}

  # If this is enabled it will cancel current running and start latest
  cancel-in-progress: true

# Environment variables
env:
  ARTIFACT_DIR: SDL_artifacts
  DOCKER_ARTIFACT_DIR: Docker_artifacts
  DOCKER_PROXY_RUN_ARGS: "--env HTTPS_PROXY=$HTTPS_PROXY \
          --env https_proxy=$https_proxy \
          --env HTTP_PROXY=$HTTP_PROXY \
          --env http_proxy=$http_proxy \
          --env NO_PROXY=${{ secrets.NO_PROXY }} \
          --env no_proxy=${{ secrets.NO_PROXY }}"
  BASE_DOCKERFILE: docker/base/Dockerfile
  CHECKIN_DOCKERFILE: docker/check-in/Dockerfile
  VDMS_IMAGE_TAG: vdms:latest
  VDMS_IMAGE_TARFILE: vdms_latest.tar
  FACELESS_USERNAME: ${{ secrets.FACELESS_NAME}}
  FACELESS_AUTHKEY: ${{ secrets.FACELESS_AUTHKEY}}
  COVERITYSTREAM: ${{ secrets.COVERITYSTREAM}}
  COVERITYSERVER: ${{ secrets.COVERITYSERVER }}
  COVERITY_IMAGE_TAG: vdms:coverity
  COVERITY_CONTAINER: vdms_coverity_${{ github.run_number }}
  CIS_CONTAINER: vdms_CIS_${{ github.run_number }}

jobs:
  # REMOVE OLD ARTIFACTS
  delete:
      name: Remove Old Artifacts
      runs-on:
        group: intellabs-vdms-runners
        labels: vdms-check-in
      steps:
        - uses: actions/github-script@v6
          id: artifact
          with:
            # Delete all artifacts
            script: |
              const res = await github.rest.actions.listArtifactsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
              })

              res.data.artifacts
                .forEach(({ id }) => {
                  github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: id,
                  })
                })

  # BUILD LATEST CODE AS DOCKER IMAGE
  BuildLatest:
    # This job builds docker container for later use
    name: Build Latest Docker Image
    needs: delete
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
        with:
          submodules: true
      - run: mkdir -p ${{ env.DOCKER_ARTIFACT_DIR }}
      - name: Build Docker Container
        run: |
          docker build --rm --build-arg="BUILD_COVERAGE=off" --build-arg="BUILD_COVERITY=off" \
            -f ${{ env.CHECKIN_DOCKERFILE}} -t ${{ env.VDMS_IMAGE_TAG}} .
          docker save -o ${{ env.DOCKER_ARTIFACT_DIR }}/${{ env.VDMS_IMAGE_TARFILE}} ${{ env.VDMS_IMAGE_TAG}}
      - name: Upload Docker Image Artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.VDMS_IMAGE_TARFILE}}
          path: ${{ env.DOCKER_ARTIFACT_DIR }}/${{ env.VDMS_IMAGE_TARFILE}}
          retention-days: 1

  # RUN BDBA; DOCKER IMAGE NEEDED
  CT7_BDBA:
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    name: CT7 - Run BDBA
    needs: BuildLatest
    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.VDMS_IMAGE_TARFILE}}
          path: ${{ env.DOCKER_ARTIFACT_DIR }}
      - name: Run BDBA
        id: bdba
        continue-on-error: true
        shell: bash
        env:
          BDBA_TOKEN: "${{ secrets.BDBA_TOKEN }}"
          bdba_group: '90'
          bdba_product_id: ${{ secrets.BDBA_PRODUCT_ID }}
        run: |
          apt-get update && apt-get install -y curl
          curl -k -H "Authorization: Bearer $BDBA_TOKEN" -H "Group: $bdba_group" -H "Replace: $bdba_product_id" \
            -T ${{ env.DOCKER_ARTIFACT_DIR }}/${{ env.VDMS_IMAGE_TARFILE}} "https://bdba001.icloud.intel.com/api/upload/"
      - name: BDBA Failure Check
        if: failure()
        run: echo "Check BDBA Server(https://bdba001.icloud.intel.com/) for binary ${{ env.VDMS_IMAGE_TARFILE}}"
      - run: |
          rm -rf ${GITHUB_WORKSPACE}/.git* ${GITHUB_ACTION_PATH} || true
          rm -rf /tmp/tmp-* ${{ env.DOCKER_ARTIFACT_DIR }} ${GITHUB_WORKSPACE}/* || true

  # RUN DOCKER SBOM; DOCKER IMAGE NEEDED
  CT36_SBOM:
    name: CT36 - Run Docker SBOM
    needs: BuildLatest
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
        with:
          submodules: true
      - run: mkdir -p ${{ env.DOCKER_ARTIFACT_DIR }} ${{ env.ARTIFACT_DIR }}
      - name: Download Docker Image
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.VDMS_IMAGE_TARFILE}}
          path: ${{ env.DOCKER_ARTIFACT_DIR }}
      - name: Load Docker Image
        run: docker load -i ${{ env.DOCKER_ARTIFACT_DIR }}/${{ env.VDMS_IMAGE_TARFILE}}
      - name: Obtain SBOM
        run: |
          docker sbom --format spdx-tag-value --output ${{ env.ARTIFACT_DIR }}/CT36_dockersbom-components.txt ${{ env.VDMS_IMAGE_TAG}}

          python3 ${PWD}/docker/check-in/spdx2csv.py -i ${{ env.ARTIFACT_DIR }}/CT36_dockersbom-components.txt \
            -o ${{ env.ARTIFACT_DIR }}/CT36_dockersbom-components.csv

          output_checks=$(echo "SBOM Total packages: $(($(cat ${{ env.ARTIFACT_DIR }}/CT36_dockersbom-components.csv | wc -l)-1))")
          echo "sbom_image_results<<EOF" >> $GITHUB_ENV
          echo "$output_checks" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Upload SBOM Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: CT36_dockersbom-components.csv
          path: ${{ env.ARTIFACT_DIR }}/CT36_dockersbom-components.csv
          if-no-files-found: error
      - name: Print Results in Job Summary
        run: |
          echo "### Results" > $GITHUB_STEP_SUMMARY
          echo "SBOM :point_right:${{ env.sbom_image_results }}" >> $GITHUB_STEP_SUMMARY

  # BUILD LATEST CODE WITH COVERITY AS DOCKER IMAGE
  CT39_Coverity:
    # Static Code Analysis
    name: CT39 - Run Coverity
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Build Docker Container with Coverity
        run: |
          docker build --rm --build-arg="BUILD_COVERAGE=off" --build-arg="BUILD_COVERITY=on" \
            -f ${{ env.CHECKIN_DOCKERFILE}} -t ${{ env.COVERITY_IMAGE_TAG}} .

      - name: Run Coverity with GCC
        run: |
          docker run --rm ${{ env.DOCKER_PROXY_RUN_ARGS }} -d --name ${{ env.COVERITY_CONTAINER }} \
            --env FACELESS_USERNAME=${{ env.FACELESS_USERNAME}} \
            --env FACELESS_AUTHKEY="${{ env.FACELESS_AUTHKEY}}" \
            --env COVERITYSERVER=${{ env.COVERITYSERVER}} \
            --env COVERITYSTREAM=${{ env.COVERITYSTREAM }} ${{ env.COVERITY_IMAGE_TAG}}

          # Configure
          docker exec -w /vdms/build ${{ env.COVERITY_CONTAINER }} bash -c "mkdir -p /coverity-results && cov-configure -gcc && cov-configure --compiler c++ --comptype g++ --template"

          # Build
          docker exec -w /vdms/build ${{ env.COVERITY_CONTAINER }} bash -c "rm -rf * && cmake .. && cov-build --dir /coverity-results make"

          # Analyze
          docker exec ${{ env.COVERITY_CONTAINER }} bash -c "cov-analyze --dir /coverity-results --concurrency --security --rule --enable-constraint-fpp --enable-fnptr --enable-virtual"

          # Commit
          docker exec ${{ env.COVERITY_CONTAINER }} bash -c "cov-commit-defects --dir /coverity-results --stream ${COVERITYSTREAM} --url ${COVERITYSERVER} --user ${FACELESS_USERNAME} --password ${FACELESS_AUTHKEY} --debug"

  # RUN BANDIT; NO DOCKER BUILD NEEDED
  CT161_Bandit:
    name: CT161 - Run Bandit
    needs: delete
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v1
      - name: Run Bandit
        id: bandit
        run: |
          python3 -m pip install --user bandit
          mkdir -p ${{ env.ARTIFACT_DIR }}
          bandit ./ -r -c .github/workflows/ipas_default.config -f csv -o ${{ env.ARTIFACT_DIR }}/CT161_bandit-report.csv
      - name: Upload Bandit Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: CT161_bandit-report.csv
          path: ${{ env.ARTIFACT_DIR }}/CT161_bandit-report.csv

  # RUN HADOLINT; NO DOCKER BUILD NEEDED
  CT222_Hadolint:
    # Check format of Dockerfile we will release (docker/base/Dockerfile)
    name: CT222 - Haskell Dockerfile Linter
    needs: delete
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
      - run: mkdir -p ${{ env.ARTIFACT_DIR }}
      - name: Run Hadolint Docker Container
        id: get_hadolint
        run: |
          set -x
          docker run --rm --env HADOLINT_FORMAT=gnu -i hadolint/hadolint:latest < ${{ env.BASE_DOCKERFILE}} 2>&1 | tee ${{ env.ARTIFACT_DIR }}/CT222_hadolint-results.txt
          output=$(cat ${{ env.ARTIFACT_DIR }}/CT222_hadolint-results.txt | grep hadolint | awk '{print $2}' | sort -u)

          echo "hadolint_output<<EOF" >> $GITHUB_ENV
          echo "$output" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Print Hadolint Results in Job Summary
        shell: bash
        run: |
          set -x
          echo "### Hadolint Returned Rule Codes" > $GITHUB_STEP_SUMMARY
          echo "${{ env.hadolint_output }}" >> $GITHUB_STEP_SUMMARY
      - name: Upload Hadolint Artifact
        uses: actions/upload-artifact@v3
        with:
          name: CT222_hadolint-results.txt
          path: ${{ env.ARTIFACT_DIR }}/CT222_hadolint-results.txt

  # RUN TRIVY; DOCKER IMAGE NEEDED
  CT247_CT248_Trivy:
    name: CT247_CT248 - Trivy Scan for Vulnerabilities
    needs: BuildLatest
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
        with:
          submodules: true
      - run: mkdir -p ${{ env.DOCKER_ARTIFACT_DIR }} ${{ env.ARTIFACT_DIR }}
      - name: Download docker image
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.VDMS_IMAGE_TARFILE}}
          path: ${{ env.DOCKER_ARTIFACT_DIR }}
      - name: Load Docker Image
        run: docker load -i ${{ env.DOCKER_ARTIFACT_DIR }}/${{ env.VDMS_IMAGE_TARFILE}}
      - name: Run Trivy vulnerability scanner
        run: |
          # Exporting Fixable Results as CSV (For SDL)
          docker run --rm ${{ env.DOCKER_PROXY_RUN_ARGS }} \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/.cache:/root/.cache \
            -v $PWD:/local_repo aquasec/trivy:latest image \
            --list-all-pkgs --ignore-unfixed --format template \
            --template @/local_repo/.github/workflows/trivy_csv.tmpl \
            --output /local_repo/CT247_CT248_trivy-report-imagescan.csv ${{ env.VDMS_IMAGE_TAG}}

          mv $PWD/CT247_CT248_trivy-report-imagescan.csv ${{ env.ARTIFACT_DIR }}/CT247_CT248_trivy-report-imagescan.csv

          # Obtain Summary Result
          output_checks=$(docker run --rm ${{ env.DOCKER_PROXY_RUN_ARGS }} \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/.cache:/root/.cache \
            -v $PWD:/local_repo aquasec/trivy:latest image \
            --ignore-unfixed --scanners vuln ${{ env.VDMS_IMAGE_TAG}} | grep "Total:")

          echo "trivy_image_results<<EOF" >> $GITHUB_ENV
          echo "$output_checks" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Upload Trivy Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: CT247_CT248_trivy-report-imagescan.csv
          path: ${{ env.ARTIFACT_DIR }}/CT247_CT248_trivy-report-imagescan.csv
          if-no-files-found: error
      - name: Print Results in Job Summary
        run: |
          echo "### Results" > $GITHUB_STEP_SUMMARY
          echo "Vulnerability Scan (fixable) :point_right:${{ env.trivy_image_results }}" >> $GITHUB_STEP_SUMMARY

  # RUN CIS; DOCKER IMAGE NEEDED
  CT249_CIS:
    # This job runs CIS Docker Benchmark
    name: CT249 - CIS Docker Benchmark
    needs: BuildLatest
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.VDMS_IMAGE_TARFILE}}
          path: ${{ env.DOCKER_ARTIFACT_DIR }}
      - name: Load Docker Image
        run: |
          docker load -i ${{ env.DOCKER_ARTIFACT_DIR }}/${{ env.VDMS_IMAGE_TARFILE}}
      - name: Run Benchmark
        id: run_CIS
        run: |
          set -x
          mkdir -p ${{ env.ARTIFACT_DIR }}
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security

          docker run --net=host -d \
            --security-opt=no-new-privileges \
            --restart on-failure:5 \
            --name ${{ env.CIS_CONTAINER}} ${{ env.VDMS_IMAGE_TAG}}

          sh docker-bench-security.sh -c container_runtime -i ${{ env.CIS_CONTAINER}} -l ../${{ env.ARTIFACT_DIR }}/CT249_CIS-results.txt
          cd ..

          output_checks=$(cat ${{ env.ARTIFACT_DIR }}/CT249_CIS-results.txt | grep "Checks:" | sed 's/^.*Checks/Checks/')
          output_score=$(cat ${{ env.ARTIFACT_DIR }}/CT249_CIS-results.txt | grep "Score:" | sed 's/^.*Score/Score/')

          echo "cis_output_checks<<EOF" >> $GITHUB_ENV
          echo "$output_checks" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "cis_output_score<<EOF" >> $GITHUB_ENV
          echo "$output_score" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Upload CIS Artifact
        uses: actions/upload-artifact@v3
        with:
          name: CT249_CIS-results.txt
          path: ${{ env.ARTIFACT_DIR }}/CT249_CIS-results.txt
      - name: Print CIS Results in Job Summary
        shell: bash
        run: |
          echo "### CIS Docker Results" > $GITHUB_STEP_SUMMARY
          echo "${{ env.cis_output_checks }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.cis_output_score }}" >> $GITHUB_STEP_SUMMARY

  # CLEANUP AFTER TESTS
  cleanup:
    name: Workflow Cleanup
    if: ${{ always() }}
    needs: [CT7_BDBA, CT36_SBOM, CT39_Coverity, CT161_Bandit, CT222_Hadolint, CT247_CT248_Trivy, CT249_CIS]
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    steps:
      - run: |
          docker stop ${{ env.COVERITY_CONTAINER }} || true && docker rm ${{ env.COVERITY_CONTAINER }} || true
          docker stop ${{ env.CIS_CONTAINER }} || true && docker rm ${{ env.CIS_CONTAINER }} || true
          docker rmi $(docker images | grep '<none>' | awk '{print $3}') || true
          docker ps -a --filter status=exited --format {{.ID}} | xargs docker rm || true
      - run: |
          rm -rf ${GITHUB_WORKSPACE}/.git* ${GITHUB_ACTION_PATH} || true
          rm -rf /tmp/tmp-* ${{ env.DOCKER_ARTIFACT_DIR }} ${GITHUB_WORKSPACE}/* ${{ env.ARTIFACT_DIR }} || true


