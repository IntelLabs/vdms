# Uses docker/check-in/Dockerfile
name: Checkin Workflow

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master and develop branch
on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
    branches:
      - develop
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # OBTAIN COVERAGE
  coverage_job:
    name: Coverage Test

    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in

    env:
      COV_URL: ${{ secrets.COVERITYSERVER }}
      COV_USER: ${{ secrets.FACELESS_NAME }}
      COVERITY_PASSPHRASE: ${{ secrets.FACELESS_AUTHKEY }}
      COVERITY_PROJECT: Vdms 2
      COVERITY_STREAM: ${{ secrets.COVERITYSTREAM}}
      CHECKIN_DOCKERFILE: docker/check-in/Dockerfile

    strategy:
      fail-fast: true
      matrix:
        include:
          - coverage_type: Source
            container_name: source_coverage_${{ github.event.pull_request.number }}
            container_tag: "vdms:source_coverage_${{ github.event.pull_request.number }}"
            output_cpp_name: source_coverage_cpp
            output_py_name: source_coverage_py
            branch_ref: ${{ github.event.pull_request.head.sha }}
          - coverage_type: Target
            container_name: target_coverage_${{ github.event.pull_request.number }}
            container_tag: "vdms:target_coverage_${{ github.event.pull_request.number }}"
            output_cpp_name: target_coverage_cpp
            output_py_name: target_coverage_py
            branch_ref: ${{ github.event.pull_request.base.ref }}

    outputs:
      source_coverage_cpp: ${{ steps.report_coverage.outputs.source_coverage_cpp}}
      source_coverage_py: ${{ steps.report_coverage.outputs.source_coverage_py}}
      modify_source: ${{ steps.git_check.outputs.modify_source}}
      target_coverage_cpp: ${{ steps.report_coverage.outputs.target_coverage_cpp}}
      target_coverage_py: ${{ steps.report_coverage.outputs.target_coverage_py}}

    # Ensures that only a single workflow in the same concurrency group will run at the same time
    concurrency:
      # group: ${{ matrix.coverage_type }}-${{ github.event.pull_request.number }}
      group: ${{ matrix.coverage_type }}-${{ github.head_ref || github.ref }}

      # If this is enabled it will cancel current running and start latest
      cancel-in-progress: true

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout ${{ matrix.coverage_type }} Branch
        uses: actions/checkout@v3
        with:
          submodules: true
          ref: ${{ matrix.branch_ref }}
          fetch-depth: 0

      - if: matrix.coverage_type  == 'Source'
        name: Format C++ Code (clang-format), Python (black code), and apply dos2unix
        run: ./.github/workflows/auto-formatter.sh

      - if: matrix.coverage_type  == 'Source'
        name: Check for modified files
        id: git_check
        run: |
          echo "commit_id=$(git log -1 --format='%H')" >> $GITHUB_OUTPUT
          git update-index -q --refresh
          echo "modify_source=$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)" >> $GITHUB_OUTPUT
          echo "added_modified=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} HEAD -- . ':!.github' ':!docker'| xargs)" >> $GITHUB_OUTPUT

      - name: Build Docker Container
        id: build_docker
        continue-on-error: true
        run: |
          set -x

          docker stop $(docker ps -aqf "name=${{ matrix.container_name }}") | xargs docker rm || true

          docker build --rm --build-arg="BUILD_COVERAGE=on" --build-arg="BUILD_COVERITY=on" \
            -f ${{ env.CHECKIN_DOCKERFILE}} -t ${{ matrix.container_tag }} .

      - name: Build Docker Container w/o cache
        if: always() && steps.build_docker.outcome == 'failure'
        run: |
          set -x

          docker stop $(docker ps -aqf "name=${{ matrix.container_name }}") | xargs docker rm || true

          docker build --no-cache --rm --build-arg="BUILD_COVERAGE=on" --build-arg="BUILD_COVERITY=on" \
            -f ${{ env.CHECKIN_DOCKERFILE}} -t ${{ matrix.container_tag }} .

      - if: matrix.coverage_type  == 'Source' &&  steps.git_check.outputs.added_modified
        uses: ./.github/actions/coverity-incremental-scan
        with:
          repo_dir: ${PWD}
          github_repo_dir: /vdms
          github_ref: ${{ steps.git_check.outputs.commit_id }}
          prNumber: ${{ github.event.pull_request.number }}
          docker_container_name: ${{ matrix.container_name }}_tmp
          docker_container_tag: ${{ matrix.container_tag }}
          modified_files: ${{ steps.git_check.outputs.added_modified }}

      - name: Get ${{ matrix.coverage_type }} Coverage
        shell: bash
        run: |
          set -x
          mkdir -p coverage

          docker run --rm -d -v ${PWD}:/local_repo --name ${{ matrix.container_name }} \
            --env AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --env AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} ${{ matrix.container_tag }}

          docker exec ${{ matrix.container_name }} bash -c "cd / && ./run_coverage_cpp.sh && cd / && ./run_coverage_py.sh"

          docker cp ${{ matrix.container_name }}:/vdms/tests/coverage_report/c_coverage_report.txt coverage/c_coverage_report_target.txt
          docker cp ${{ matrix.container_name }}:/vdms/tests/coverage_report/c_coverage_report.xml coverage/c_coverage_report_target.xml
          echo "coverage_value_cpp=$(cat coverage/c_coverage_report_target.xml | grep -oP 'coverage line-rate="([-+]?\d*\.\d+|\d+)"' | grep -oP "[-+]?\d*\.\d+|\d+" | awk '{print $1*100}')" >> $GITHUB_ENV

          docker cp ${{ matrix.container_name }}:/vdms/tests/coverage_report/py_coverage_report.txt coverage/py_coverage_report_target.txt || true
          docker cp ${{ matrix.container_name }}:/vdms/tests/coverage_report/py_coverage_report.xml coverage/py_coverage_report_target.xml || true

          echo "coverage_value_py=$(cat coverage/py_coverage_report_target.xml | grep "coverage version" | grep -oP 'line-rate="([-+]?\d*\.\d+|\d+)"' | grep -oP "[-+]?\d*\.\d+|\d+"| awk '{print $1*100}')" >> $GITHUB_ENV

      - name: Report ${{ matrix.coverage_type }} Coverage
        id: report_coverage
        run: |
          set -x

          # CPP
          if [[ -z $coverage_value_cpp ]]
          then
            exit 1
          fi
          echo "${{ matrix.coverage_type }} CPP Coverage: ${coverage_value_cpp}"
          echo "${{ matrix.output_cpp_name }}=${coverage_value_cpp}" >> $GITHUB_OUTPUT

          # Python
          if [[ -z $coverage_value_py ]]
          then
            exit 1
          fi
          echo "${{ matrix.coverage_type }} Python Coverage: ${coverage_value_py}"
          echo "${{ matrix.output_py_name }}=${coverage_value_py}" >> $GITHUB_OUTPUT

      - if: always()
        name: Cleanup
        run: |
          docker stop $(docker ps -aqf "name=${{ matrix.container_name }}") | xargs docker rm || true
          docker rmi $(docker images | grep '<none>' | awk '{print $3}') || true
          rm -rf ${GITHUB_WORKSPACE}/.git* ${GITHUB_ACTION_REPOSITORY} || true
          rm -rf /tmp/tmp-* ${{ env.ARTIFACT_DIR }} ${GITHUB_WORKSPACE}/*  || true

  # COMPARE COVERAGE NUMBERS
  compare_coverage:
    name: Compare Reported Coverage
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    needs: coverage_job
    steps:
      - name: Comment Coverage
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Target CPP Coverage: ${{ needs.coverage_job.outputs.target_coverage_cpp }}%\nSource CPP Coverage: ${{ needs.coverage_job.outputs.source_coverage_cpp }}%\n\n\nTarget Python Coverage: ${{ needs.coverage_job.outputs.target_coverage_py }}%\nSource Python Coverage: ${{ needs.coverage_job.outputs.source_coverage_py }}%'
            })
      - id: comp_diff
        run: |
          echo "CPP_DIFF=$(echo '${{ needs.coverage_job.outputs.target_coverage_cpp }}-${{ needs.coverage_job.outputs.source_coverage_cpp }}' | bc )" >> $GITHUB_ENV
          echo "PY_DIFF=$(echo '${{ needs.coverage_job.outputs.target_coverage_py }}-${{ needs.coverage_job.outputs.source_coverage_py }}' | bc )" >> $GITHUB_ENV
      - name: Compare Coverage
        run: |
          echo "Source CPP Coverage: ${{ needs.coverage_job.outputs.source_coverage_cpp }}"
          echo "Target CPP Coverage: ${{ needs.coverage_job.outputs.target_coverage_cpp }}"

          if (( $(echo "${{ env.CPP_DIFF }} > 0.1" | bc -l) )); then
            echo 'CPP Coverage below CPP Target'
            exit 1
          fi

          echo "Source Python Coverage: ${{ needs.coverage_job.outputs.source_coverage_py }}"
          echo "Target Python Coverage: ${{ needs.coverage_job.outputs.target_coverage_py }}"

          if (( $(echo "${{ env.PY_DIFF }} > 0.1" | bc -l) )); then
            echo 'Python Coverage below Target'
            exit 1
          fi

  # FORMAT CODE
  commit_format:
    name: Commit Format
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    needs: coverage_job
    steps:
      # Checkout code doesn't persist across jobs
      # If formatting needed, checkout and format again
      - if: needs.coverage_job.outputs.modify_source == 'true'
        name: Checkout Source Branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.FACELESS_TOKEN || github.token }}

      - if: needs.coverage_job.outputs.modify_source == 'true'
        run: ./.github/workflows/auto-formatter.sh

      # Update Code and Push (Should be last steps of workflow since it changes commit)
      - if: needs.coverage_job.outputs.modify_source == 'true'
        name: Commit Lint Changes
        id: format_commit
        continue-on-error: true
        run: |
          git config --global user.name ${{ secrets.FACELESS_NAME }}
          git config --global user.email ${{ secrets.FACELESS_NAME }}@intel.com
          git remote set-url origin https://x-access-token:${{ secrets.FACELESS_TOKEN }}@github.com/${{ github.event.pull_request.head.repo.full_name }}
          git commit -am "Automated format changes"
          git push

      - if: steps.format_commit.outcome != 'success' && needs.coverage_job.outputs.modify_source == 'true'
        name: Check Push Failure
        run: |
          echo "Please provide sys-vdms write access to fork (if applicable)."
          exit 1

  # CLEANUP AFTER TESTS
  cleanup:
    name: Workflow Cleanup
    if: ${{ always() }}
    needs: [compare_coverage, commit_format]
    runs-on:
      group: intellabs-vdms-runners
      labels: vdms-check-in
    steps:
      - run: |
          docker stop source_coverage_${{ github.event.pull_request.number }} || true && docker rm source_coverage_${{ github.event.pull_request.number }} || true
          docker stop source_coverage_${{ github.event.pull_request.number }}_tmp || true && docker rm source_coverage_${{ github.event.pull_request.number }}_tmp || true
          docker stop target_coverage_${{ github.event.pull_request.number }} || true && docker rm target_coverage_${{ github.event.pull_request.number }} || true
          docker rmi vdms:source_coverage_${{ github.event.pull_request.number }} || true
          docker rmi vdms:target_coverage_${{ github.event.pull_request.number }} || true
          docker rmi $(docker images | grep '<none>' | awk '{print $3}') || true
          docker ps -a --filter status=exited --format {{.ID}} | xargs docker rm || true
          docker builder prune -f
      - run: |
          rm -rf ${GITHUB_WORKSPACE}/.git* ${GITHUB_ACTION_PATH} || true
          rm -rf /tmp/tmp-* ${{ env.DOCKER_ARTIFACT_DIR }} ${GITHUB_WORKSPACE}/* ${{ env.ARTIFACT_DIR }} || true
