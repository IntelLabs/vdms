utils_env = Environment(CPPPATH=
                          ['include/comm',
                           'include/protobuf',
                           'include/chrono'],
                        CXXFLAGS="-std=c++11")

comm_cc = ['src/comm/Connection.cc',
           'src/comm/ConnServer.cc',
           'src/comm/ConnClient.cc',
           'src/comm/Exception.cc',
          ]

#Compile .proto file to generate protobuf files (.h and .cc).
proto1 = utils_env.Command (
           ['include/protobuf/queryMessage.pb.h',
            'src/protobuf/queryMessage.pb.cc',
            'include/protobuf/queryMessage_pb2.py',
           ],
            'src/protobuf/queryMessage.proto', # $SOURCE
            'protoc \
            -I=src/protobuf --cpp_out=src/protobuf/ \
            -I=src/protobuf --python_out=include/protobuf $SOURCE && \
            mv src/protobuf/queryMessage.pb.h \
               include/protobuf/queryMessage.pb.h'
            )

# We need to move the .h generated by protoc to include/protobuf
# proto2 = utils_env.Command('include/protobuf/queryMessage.pb.h', # $TARGET
#                   'src/protobuf/queryMessage.pb.h',     # $SOURCE
#                   'mv $SOURCE $TARGET')

protobuf_cc = ['src/protobuf/queryMessage.pb.cc']

chrono_cc = ['src/chrono/Chrono.cc']

utils_source_files = [comm_cc, protobuf_cc, chrono_cc]

utils_env.ParseConfig('pkg-config --cflags --libs protobuf')
utils_env.SharedLibrary('athena-utils', utils_source_files)

# Comm Testing
comm_test_env = Environment(CPPPATH=['include/comm'],
                            CXXFLAGS="-std=c++11")

comm_test_source_files = "test/comm/UnitTests.cc";
comm_test_env.Program('test/comm/comm_test', comm_test_source_files,
            LIBS = ['libathena-utils', 'pthread', 'gtest'],
            LIBPATH = ['.']
            )